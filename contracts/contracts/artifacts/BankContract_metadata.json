{
	"compiler": {
		"version": "0.5.0+commit.1d4f565a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": false,
				"inputs": [
					{
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "closePaymentChannel",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "getPayment",
				"outputs": [
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "address"
					},
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_client",
						"type": "address"
					},
					{
						"name": "_service_provider",
						"type": "address"
					},
					{
						"name": "_tokenSupply",
						"type": "uint256"
					},
					{
						"name": "_claimRatio",
						"type": "uint256"
					},
					{
						"name": "_claimTime",
						"type": "uint256"
					},
					{
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "initPaymentChannel",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_id",
						"type": "uint256"
					},
					{
						"name": "_tokenAmount",
						"type": "uint256"
					}
				],
				"name": "requestServiceAndEscrowTokens",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"name": "paymentIds",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "pay",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "serviceDone",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "_id",
						"type": "uint256"
					}
				],
				"name": "serviceClaim",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "_bank",
						"type": "address"
					}
				],
				"payable": true,
				"stateMutability": "payable",
				"type": "constructor"
			}
		],
		"devdoc": {
			"methods": {
				"constructor": {
					"details": "Contract that manages the private paymenrs channel.",
					"params": {
						"_bank": "address of the wallet used by the bank"
					}
				},
				"getPayment(uint256)": {
					"details": "Get a payment info. Only the bank can call this.",
					"params": {
						"_id": "id of the payment"
					}
				},
				"initPaymentChannel(address,address,uint256,uint256,uint256,uint256)": {
					"details": "Init a new payment, take all the required data in input and create an erc20 token. Add the new payment to the map containing all payments.",
					"params": {
						"_client": "_service_provider _tokenSupply _claimRatio _claimTime _id "
					}
				},
				"requestServiceAndEscrowTokens(uint256,uint256)": {
					"details": "request a service for a certain token amount",
					"params": {
						"_id": "_tokenAmount id of the payment and amount of token"
					},
					"return": "bool true if the client has enough token allocated flase else"
				},
				"serviceClaim(uint256)": {
					"details": "Client can call the contract and claim if not satisfied with service.",
					"params": {
						"_id": "id of the payment"
					}
				},
				"serviceDone(uint256)": {
					"details": "Service provider tell the contract that the service has been excuted",
					"params": {
						"_id": "id of the payment"
					}
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/BankContract.sol": "BankContract"
		},
		"evmVersion": "byzantium",
		"libraries": {},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/BankContract.sol": {
			"keccak256": "0x46197e8ce7dec0a85e7767cb4f3d1858b105d66fce39e599ef59e535bd4b1360",
			"urls": [
				"bzzr://acc3dbbda8be9ad1a8f9853b51fce484235e685c39225b2ca904cf21f35313c2"
			]
		},
		"contracts/MetaCoin.sol": {
			"keccak256": "0x2a882f653886e4717abf1929bb8430689a74620be647ec8def0a3b20207ed5ca",
			"urls": [
				"bzzr://595ffdb44be378cee01846fd7413b5b8444a380094d98742f4d874d0d4fb89aa"
			]
		}
	},
	"version": 1
}